#!/usr/bin/env node

"use strict";

var fs = require("fs");
var path = require("path");

var cli = require("cli");
var mime = require("mime");
var mkdirp = require("mkdirp");

var ObsidianProjectFile = require("../lib");

cli.enable("status");

cli.parse({
    extract: ["x", "Extract the sections of the given project"],
    create: ["c", "Create a project file from the given files"],
    detail: ["d", "Get informations about the given project file"],
    file: ["f", "The project file to read or write", "file", null],

    type: ["t", "Project type", "string", "GENERIC"],
    metadata: ["m", "JSON file that contains project's metadata", "file", null],
    "metadata-format": ["M", "Format of the metadata section (0: JSON, 1: JSON+Deflate)", "n", 1],
    project:  ["p", "JSON file that contains the seriallized project", "file", null],
    "project-format": ["P", "Format of the project section (0: JSON, 1: JSON+Deflate)", "n", 1],
    index: ["i", "JSON file that contains the blob index (automatically built by default)", "file", null],
    "index-format": ["I", "Format of the blob index section (0: JSON, 1: JSON+Deflate)", "n", 1],
});

function isFile(path) {
    try {
        var stat = fs.statSync(path);
        return stat.isFile();
    }
    catch (e) {
        return false;
    }
}

function isDir(path) {
    try {
        var stat = fs.statSync(path);
        return stat.isDirectory();
    }
    catch (e) {
        return false;
    }
}

function detail(source) {
    var opBuffer = fs.readFileSync(source);

    if (!ObsidianProjectFile.isObsidianProjectFile(opBuffer)) {
        cli.error("The given file is not a valid Obsidian Project File.");
        process.exit(1);
    }

    var wp;
    try {
         wp = new ObsidianProjectFile(opBuffer);
    } catch (error) {
        cli.error("The given file is not a valid Obsidian Project File.");
        process.exit(1);
    }

    var header = wp._loadHeader(opBuffer);

    console.log("FILE:    " + source);
    console.log("LENGTH:  " + opBuffer.length + " B");
    console.log("VERSION: " + header.version);
    console.log("TYPE:    " + header.type);

    console.log("\nMETADATA\n--------------------------------------");
    for (var k in wp.metadata) {
        console.log(k + ": " + wp.metadata[k]);
    }

    var project = JSON.stringify(wp.project, null, 2);
    console.log("\nPROJECT" + ((project.length > 500) ? " (excerpt)" : "") + "\n--------------------------------------");
    console.log(project.substring(0, 500));

    console.log("\nBLOBS\n--------------------------------------");
    var blobs = wp.getBlobList();
    for (var i = 0 ; i < blobs.length ; i++) {
        console.log(blobs[i] + " [" + wp.getBlobRecord(blobs[i]).mime + "] (" + wp.getBlob(blobs[i]).length + " B)");
    }
}

function extract(source, dest) {
    var opBuffer = fs.readFileSync(source);

    if (!ObsidianProjectFile.isObsidianProjectFile(opBuffer)) {
        cli.error("The given file is not a valid Obsidian Project File.");
        process.exit(1);
    }

    if (!isDir(dest)) {
        console.log("* Creating the destination folder '" + dest + "'");
        mkdirp.sync(dest);
    }

    var wp;
    try {
         wp = new ObsidianProjectFile(opBuffer);
    } catch (error) {
        cli.error("The given file is not a valid Obsidian Project File.");
        process.exit(1);
    }

    console.log("* Extracting metadata to '" + path.join(dest, "__metadata__.json") + "'");
    fs.writeFileSync(path.join(dest, "__metadata__.json"), JSON.stringify(wp.metadata));

    console.log("* Extracting project to '" + path.join(dest, "__project__.json") + "'");
    fs.writeFileSync(path.join(dest, "__project__.json"), JSON.stringify(wp.project));

    var records = {};
    var blobs = wp.getBlobList();
    for (var i = 0 ; i < blobs.length ; i++) {
        records[blobs[i]] = wp.getBlobRecord(blobs[i]);
        console.log("* Extracting blob '" + path.join(dest, blobs[i]) + "'");
        fs.writeFileSync(path.join(dest, blobs[i]), wp.getBlob(blobs[i]));
    }

    console.log("* Writing blobIndex to '" + path.join(dest, "__blobindex__.json") + "'");
    fs.writeFileSync(path.join(dest, "__blobindex__.json"), JSON.stringify(records));
}

function create(dest, metadata, project, index, files, options) {
    var wp = new ObsidianProjectFile();

    wp.type = options.type;

    if (metadata) {
        console.log("* Adding metadata from '" + metadata + "'");
        wp.metadata = JSON.parse(fs.readFileSync(metadata, "utf8"));
    }

    if (project) {
        console.log("* Adding project from '" + project + "'");
        wp.project = JSON.parse(fs.readFileSync(project, "utf8"));
    }

    var blobIndex = {};
    if (index) {
        blobIndex = JSON.parse(fs.readFileSync(index, "utf8"));
    }
    for (var i = 0 ; i < files.length ; i++) {
        if (!isFile(files[i])) {
            continue;
        }
        var blobId = path.basename(files[i]);
        var record = blobIndex[blobId] || {};
        if (!record.mime) {
            record.mime = mime.getType(files[i]);
        }
        console.log("* Adding blob from '" + files[i] + "' as " + record.mime);
        wp.addBlob(fs.readFileSync(files[i]), blobId, record);
    }

    fs.writeFileSync(dest, wp.exportAsBlob(options));
    cli.ok("Project file writen: " + dest);
}

cli.main(function (args, opts) {
    if (!opts.extract && !opts.create && !opts.detail) {
        cli.error("You must define one of the following options: -x -c -d");
        console.log("Try 'obsidian-file -h' to get more informations");
        process.exit(1);
    }

    if (opts.detail) {
        if (!opts.file && args.length !== 1) {
            cli.error("You must provide a file to get details");
            console.log("Try 'obsidian-file -h' to get more informations");
            process.exit(1);
        }
        detail(opts.file || args[0]);
        return;
    }

    if (!opts.file) {
        cli.error("You must define a working file with the -f option");
        console.log("Try 'obsidian-file -h' to get more informations");
        process.exit(1);
    }

    if (opts.extract) {
        extract(opts.file, args[0] || "./");
    } else {
        var metadata = opts.metadata;
        var project = opts.project;
        var index = opts.index;
        var files = [];

        for (var i = 0 ; i < args.length ; i++) {
            if (!metadata && args[i].indexOf("__metadata__.json") > -1) {
                metadata = args[i];
            } else if (!project && args[i].indexOf("__project__.json") > -1) {
                project = args[i];
            } else if (!index && args[i].indexOf("__blobindex__.json") > -1) {
                index = args[i];
            } else {
                files.push(args[i]);
            }
        }

        create(opts.file, metadata, project, index, files, {
            metadataFormat: opts["metadata-format"],
            projectFormat: opts["project-format"],
            blobIndexFormat: opts["index-format"],
            type: opts.type
        });
    }
});
